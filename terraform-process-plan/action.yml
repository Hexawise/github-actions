name: 'Terraform Process Plan'
description: 'Runs Terraform to process a plan and creates a comment if action is required'
inputs:
  group:
    description: 'Terraform Group'
    required: true
  github_token:
    description: 'Github Token'
    required: true
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      shell: bash
      run: |
        echo "::group::Terraform Init"
        terraform -chdir=./terraform/${{ inputs.group }} init > /dev/null
        echo "::endgroup::"

    - name: Terraform Validate
      id: validate
      shell: bash
      run: |
        echo "::group::Terraform Validate"
        terraform -chdir=./terraform/${{ inputs.group }} validate -no-color
        echo "::endgroup::"

    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        echo "::group::Terraform Plan"
        set +e
        # terraform -chdir=./terraform/${{ inputs.group }} plan -no-color -detailed-exitcode
        terraform -chdir=./terraform/${{ inputs.group }} plan -no-color -detailed-exitcode -input=false -out=tfplan > /dev/null
        echo ::set-output name=exit_status::$?
        terraform -chdir=./terraform/${{ inputs.group }} show tfplan
        rm ./terraform/${{ inputs.group }}/tfplan
        echo "::endgroup::"

    - uses: actions/github-script@v4
      id: query-jobs
      with:
        script: |
          if("${{ github.event_name }}" === "pull_request" && ${{ steps.plan.outputs.exit_status }} === 2) {
            const result = await github.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.run_id }},
            });

            return result.data.jobs.find(function(job) { return job.name === "Create a plan for ${{ inputs.group }}" }).id;
          }

    - uses: actions/github-script@v4
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          if("${{ github.event_name }}" === "pull_request" && ${{ steps.plan.outputs.exit_status }} === 2) {
            // Get the list of comments
            // Find the comment(s) by github-actions that have "Group: \`${{ inputs.group }}\`" in their body
            // Delete these comments
            // Create our new comment

            const comments = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            console.log(comments)

            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Changes Pending\`

            ${{ format('{0}/checks?check_run_id={1}', github.event.pull_request._links.html.href, steps.query-jobs.outputs.result) }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Group: \`${{ inputs.group }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
