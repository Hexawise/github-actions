name: 'Terraform Process Plan'
description: 'Runs Terraform to process a plan and creates a comment if action is required'
inputs:
  group:
    description: 'Terraform Group'
    required: true
  github_token:
    description: 'Github Token'
    required: true
  commit_message:
    description: 'Git Commit Message'
    required: true
outputs:
  exit-status:
    description: 'Terraform Plan Exit Code'
    value: ${{ steps.plan.outputs.exit-status }}
runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Check for Terraform Targetting
      id: targeting
      shell: bash
      run: echo ::set-output name=group-targeting::$(echo "${{ inputs.commit_message }}" | grep -oP "(?<=${{ inputs.group }}::)([^\n\r\s]+)")

    - name: Terraform Init
      id: init
      shell: bash
      run: |
        echo "::group::Terraform Init"
        terraform -chdir=./terraform/${{ inputs.group }} init > /dev/null
        echo "::endgroup::"

    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        # Set our base command
        BASE="terraform -chdir=./terraform/${{ inputs.group }} plan -no-color -detailed-exitcode -input=false -out=tfplan"

        # If we have any targets for this input group then split them out by commas and append
        # to the base command our -target=<group>
        if [ ! -z "${{ steps.targeting.outputs.group-targeting }}" ]
        then
          echo "::group::Terraform Plan [${{inputs.group}}::${{ steps.targeting.outputs.group-targeting }}]"
          IFS=',' read -ra TARGET <<< "${{ steps.targeting.outputs.group-targeting }}"
          for i in "${TARGET[@]}"; do
            BASE="$BASE -target=$i"
          done
        else
          echo "::group::Terraform Plan [${{inputs.group}}::Full]"
        fi

        # Ensure we don't error out for our detailed exit codes
        set +e

        # Run our command and set the output to an exit-status variable
        eval $BASE > /dev/null
        echo ::set-output name=exit-status::$?

        # Show our plan and then remove the generated file
        terraform -chdir=./terraform/${{ inputs.group }} show tfplan
        rm ./terraform/${{ inputs.group }}/tfplan
        echo "::endgroup::"

    - uses: actions/github-script@v4
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // If our exit status is 1, an error occurred, so throw and bail
          if(${{ steps.plan.outputs.exit-status }} === 1) {
            throw "The Terraform Plan operation did not complete successfully."
          }

          // Otherwise, ensure this is a PR and that our exit status from the terraform command is 2, indicating changes
          if("${{ github.event_name }}" === "pull_request" && ${{ steps.plan.outputs.exit-status }} === 2) {
            // Get the list of jobs for this run
            const jobsResult = await github.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.run_id }},
            });

            // From the list of jobs, grab the job id that applies to this particular job
            const jobId = jobsResult.data.jobs.find(function(job) { return job.name === "Create a plan for ${{ inputs.group }}" }).id;

            // Get the list of comments
            const commentsResult = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            // Find the comment(s) by github-actions[bot] that have "Group: \`${{ inputs.group }}\`" in their body
            const commentsForGroup = commentsResult.data.filter(function(comment) { return comment.body.includes("Group: `${{ inputs.group }}`") && comment.user.login === "github-actions[bot]" })

            // Delete these comments
            commentsForGroup.forEach(function(comment) {
              github.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              })
            })

            // Generate the content for our comment
            const output = `Changes pending for Terraform plan in **terraform/${{ inputs.group }}**

            https://github.com/${{ github.repository }}/runs/${jobId}?check_suite_focus=true

            *Pusher: @${{ github.actor }}, Group: \`${{ inputs.group }}\`*`;

            // Create our new comment
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
